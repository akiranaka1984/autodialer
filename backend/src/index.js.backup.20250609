// backend/src/index.js - DialerService修正版（完全置換）
const express = require('express');
const cors = require('cors');
const http = require('http');
const logger = require('./services/logger');
const db = require('./services/database');

require('dotenv').config();

const app = express();
const PORT = parseInt(process.env.PORT || '5000', 10);
const server = http.createServer(app);

// 🔧 追加: HTTPサーバー安定化設定
server.timeout = 30000; // 30秒タイムアウト
server.keepAliveTimeout = 65000; // Keep-Alive設定
server.headersTimeout = 66000; // ヘッダータイムアウ

// CORS設定
app.use((req, res, next) => {
  const origin = req.headers.origin;
  const allowedOrigins = [
    'http://localhost:3000',
    'http://localhost:3001', 
    'http://localhost:3003',
    'http://127.0.0.1:3003',
    'http://146.190.83.205:3003'
  ];
  
  res.setHeader("Access-Control-Allow-Origin", "*");
  
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  res.setHeader('Access-Control-Max-Age', '86400');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
});

// ミドルウェア
app.use(express.json({ limit: '10mb', strict: true }));
app.use(express.urlencoded({ extended: true, limit: '10mb', parameterLimit: 1000 }));

// 🔧 新規追加: リクエストタイムアウト保護
app.use((req, res, next) => {
  req.setTimeout(25000, () => {
    console.error(`Request timeout: ${req.method} ${req.url}`);
    if (!res.headersSent) {
      res.status(408).json({ error: 'Request timeout' });
    }
  });
  next();
});

// リクエストログ
app.use((req, res, next) => {
  console.log(`${req.method} ${req.url} - Origin: ${req.headers.origin || 'none'}`);
  next();
});

// ✅ ルーター登録
console.log('🚀 ルーター登録開始...');

const routerStatus = {
  system: false,
  contacts: false,
  campaigns: false,
  callerIds: false,
  calls: false,
  audio: false,
  ivr: false
};

// 1. システムルーター
try {
  const systemRouter = require('./routes/system');
  app.use('/api/system', systemRouter);
  routerStatus.system = true;
  console.log('✅ system router 登録成功');
} catch (error) {
  console.error('❌ system router 登録失敗:', error.message);
}

// 2. 連絡先ルーター
try {
  const contactsRouter = require('./routes/contacts');
  app.use('/api', contactsRouter);
  routerStatus.contacts = true;
  console.log('✅ contacts router 登録成功');
} catch (error) {
  console.error('❌ contacts router 登録失敗:', error.message);
}

// 3. キャンペーンルーター
try {
  const campaignsRouter = require('./routes/campaigns');
  app.use('/api/campaigns', campaignsRouter);
  routerStatus.campaigns = true;
  console.log('✅ campaigns router 登録成功');
} catch (error) {
  console.error('❌ campaigns router 登録失敗:', error.message);
}

// 4. 発信者番号ルーター
try {
  const callerIdsRouter = require('./routes/callerIds');
  app.use('/api/caller-ids', callerIdsRouter);
  routerStatus.callerIds = true;
  console.log('✅ caller-ids router 登録成功');
} catch (error) {
  console.error('❌ caller-ids router 登録失敗:', error.message);
}

// 5. 通話ルーター
try {
  const callsRouter = require('./routes/calls');
  app.use('/api/calls', callsRouter);
  routerStatus.calls = true;
  console.log('✅ calls router 登録成功');
} catch (error) {
  console.error('❌ calls router 登録失敗:', error.message);
}

// 6. 音声ルーター
try {
  const audioRouter = require('./routes/audio');
  app.use('/api/audio', audioRouter);
  routerStatus.audio = true;
  console.log('✅ audio router 登録成功');
} catch (error) {
  console.error('❌ audio router 登録失敗:', error.message);
}

// 7. IVRルーター
try {
  const ivrRouter = require('./routes/ivr');
  app.use('/api/ivr', ivrRouter);
  routerStatus.ivr = true;
  console.log('✅ ivr router 登録成功');

// 8. 転送ルーター
try {
  const transferRouter = require("./routes/transfer");
  app.use("/api", transferRouter);
  routerStatus.transfer = true;
  console.log("✅ transfer router 登録成功");
} catch (error) {
  console.error("❌ transfer router 登録失敗:", error.message);
}
} catch (error) {
  console.error('❌ ivr router 登録失敗:', error.message);
}

console.log('📊 ルーター登録状況:', routerStatus);

// === 認証エンドポイント ===
app.post("/api/auth/login", (req, res) => {
  const { username, password } = req.body;
  console.log("ログイン試行:", username);
  if (username && password) {
    res.json({
      success: true,
      user: { username: username, role: "admin", name: "システム管理者" },
      token: "dummy-token-" + Date.now()
    });
  } else {
    res.status(400).json({ success: false, message: "ユーザー名とパスワードが必要です" });
  }
});

app.get("/api/auth/profile", (req, res) => {
  res.json({
    id: 1,
    username: "admin",
    name: "システム管理者",
    role: "admin"
  });
});


// === 基本エンドポイント ===
app.get('/', (req, res) => {
  res.json({ 
    message: 'オートコールシステムAPI稼働中',
    version: '1.4.1',
    timestamp: new Date().toISOString(),
    routerStatus: routerStatus,
    endpoints: [
      '/api/system/health',
      '/api/campaigns',
      '/api/campaigns/:id/contacts',
      '/api/campaigns/:id/contacts/upload',
      '/api/caller-ids', 
      '/api/calls/test',
      '/api/audio',
      '/api/ivr/test-call'
    ]
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    server: 'main',
    routerStatus: routerStatus
  });
});

// === フォールバック用の基本API ===
if (!routerStatus.campaigns) {
  console.log('🔄 キャンペーンルーターフォールバック登録中...');
  
  app.get('/api/campaigns', async (req, res) => {
    try {
      const [campaigns] = await db.query(`
        SELECT c.id, c.name, c.description, c.status, c.created_at, c.updated_at, c.progress,
               ci.number as caller_id_number,
               (SELECT COUNT(*) FROM contacts WHERE campaign_id = c.id) as contact_count
        FROM campaigns c
        LEFT JOIN caller_ids ci ON c.caller_id_id = ci.id
        ORDER BY c.created_at DESC
      `);
      
      res.json({
        campaigns: campaigns || [],
        total: campaigns ? campaigns.length : 0,
        page: 1,
        limit: 50,
        totalPages: 1
      });
    } catch (error) {
      console.error('フォールバック キャンペーン一覧エラー:', error);
      res.status(500).json({ 
        campaigns: [], 
        total: 0, 
        message: 'キャンペーンの取得に失敗しました' 
      });
    }
  });

  app.get('/api/campaigns/:id', async (req, res) => {
    try {
      const { id } = req.params;
      
      const [campaigns] = await db.query(`
        SELECT c.*, 
               ci.number as caller_id_number,
               ci.description as caller_id_description,
               (SELECT COUNT(*) FROM contacts WHERE campaign_id = c.id) as contact_count
        FROM campaigns c
        LEFT JOIN caller_ids ci ON c.caller_id_id = ci.id
        WHERE c.id = ?
      `, [id]);
      
      if (campaigns.length === 0) {
        return res.status(404).json({ message: 'キャンペーンが見つかりません' });
      }
      
      res.json(campaigns[0]);
    } catch (error) {
      console.error(`フォールバック キャンペーン詳細エラー: ID=${req.params.id}`, error);
      res.status(500).json({ message: 'データの取得に失敗しました' });
    }
  });

  app.get('/api/campaigns/:id/stats', async (req, res) => {
    try {
      const { id } = req.params;
      
      const [campaigns] = await db.query('SELECT * FROM campaigns WHERE id = ?', [id]);
      
      if (campaigns.length === 0) {
        return res.status(404).json({ message: 'キャンペーンが見つかりません' });
      }
      
      const [contactStats] = await db.query(`
        SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
          SUM(CASE WHEN status = 'called' THEN 1 ELSE 0 END) as called,
          SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
          SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed,
          SUM(CASE WHEN status = 'dnc' THEN 1 ELSE 0 END) as dnc
        FROM contacts 
        WHERE campaign_id = ?
      `, [id]);
      
      const [callStats] = await db.query(`
        SELECT 
          COUNT(*) as total_calls,
          SUM(CASE WHEN status = 'ANSWERED' THEN 1 ELSE 0 END) as answered_calls,
          AVG(duration) as avg_duration
        FROM call_logs 
        WHERE campaign_id = ?
      `, [id]);
      
      const contactStat = contactStats[0];
      const callStat = callStats[0];
      
      const progress = contactStat.total > 0 
        ? Math.round(((contactStat.completed + contactStat.failed + contactStat.dnc) / contactStat.total) * 100) 
        : 0;
      
      res.json({
        campaignId: parseInt(id),
        campaignName: campaigns[0].name,
        campaignStatus: campaigns[0].status,
        progress,
        contacts: {
          total: contactStat.total,
          pending: contactStat.pending,
          called: contactStat.called,
          completed: contactStat.completed,
          failed: contactStat.failed,
          dnc: contactStat.dnc
        },
        calls: {
          total: callStat.total_calls || 0,
          answered: callStat.answered_calls || 0,
          avgDuration: callStat.avg_duration ? Math.round(callStat.avg_duration) : 0
        }
      });
    } catch (error) {
      console.error(`フォールバック キャンペーン統計エラー: Campaign=${req.params.id}`, error);
      res.status(500).json({ message: 'データの取得に失敗しました' });
    }
  });

  app.post('/api/campaigns/:id/start', async (req, res) => {
    try {
      const { id } = req.params;
      
      console.log(`🚀 キャンペーン開始要求: ID=${id}`);
      
      // データベースのステータス更新
      const [result] = await db.query(
        'UPDATE campaigns SET status = "active", updated_at = NOW() WHERE id = ?',
        [id]
      );
      
      if (result.affectedRows === 0) {
        return res.status(400).json({ message: 'キャンペーンが見つかりません' });
      }
      
      // 🔥 DialerServiceにキャンペーンを手動登録
      try {
        const dialerService = require('./services/dialerService');
        
        console.log('🔄 DialerServiceへキャンペーン追加...');
        
        // キャンペーン情報を取得
        const [campaigns] = await db.query(`
          SELECT c.id, c.name, c.max_concurrent_calls, c.caller_id_id,
                 ci.number as caller_id_number
          FROM campaigns c
          JOIN caller_ids ci ON c.caller_id_id = ci.id
          WHERE c.id = ? AND ci.active = true
        `, [id]);
        
        if (campaigns.length > 0) {
          const campaign = campaigns[0];
          
          // DialerServiceを強制初期化
          if (!dialerService.initialized) {
            dialerService.initialized = true;
            dialerService.enabled = true;
            dialerService.errorCount = 0;
            dialerService.dialInterval = 5000; // 5秒間隔
            console.log('🔧 DialerService強制初期化完了');
          }
          
          // activeCampaignsに追加
          dialerService.activeCampaigns.set(parseInt(id), {
            id: campaign.id,
            name: campaign.name,
            maxConcurrentCalls: Math.min(campaign.max_concurrent_calls || 1, 2),
            callerIdId: campaign.caller_id_id,
            callerIdNumber: campaign.caller_id_number,
            activeCalls: 0,
            status: 'active',
            lastDialTime: null,
            failCount: 0
          });
          
          console.log(`✅ キャンペーン${id}をDialerServiceに追加`);
          
          // 自動発信ジョブ開始
          if (!dialerService.dialerIntervalId) {
            dialerService.startDialerJobSafe();
            console.log('🚀 自動発信ジョブ開始');
          }
          
        } else {
          console.warn(`キャンペーン${id}の詳細取得失敗`);
        }
        
      } catch (dialerError) {
        console.error('DialerService追加エラー:', dialerError.message);
      }
      
      res.json({
        success: true,
        message: 'キャンペーンを開始しました',
        campaignId: parseInt(id)
      });
      
    } catch (error) {
      console.error(`フォールバック キャンペーン開始エラー: ID=${req.params.id}`, error);
      res.status(500).json({ message: 'キャンペーンの開始に失敗しました' });
    }
  });

  app.post('/api/campaigns/:id/stop', async (req, res) => {
    try {
      const { id } = req.params;
      
      const [result] = await db.query(
        'UPDATE campaigns SET status = "paused", updated_at = NOW() WHERE id = ?',
        [id]
      );
      
      if (result.affectedRows === 0) {
        return res.status(400).json({ message: 'キャンペーンが見つかりません' });
      }
      
      // DialerServiceからキャンペーンを削除
      try {
        const dialerService = require('./services/dialerService');
        dialerService.activeCampaigns.delete(parseInt(id));
        console.log(`🛑 キャンペーン${id}をDialerServiceから削除`);
        
        // 他にアクティブキャンペーンがなければジョブ停止
        if (dialerService.activeCampaigns.size === 0) {
          dialerService.stopDialerJob();
          console.log('🛑 自動発信ジョブ停止');
        }
      } catch (dialerError) {
        console.error('DialerService停止エラー:', dialerError.message);
      }
      
      res.json({
        success: true,
        message: 'キャンペーンを停止しました',
        campaignId: parseInt(id)
      });
    } catch (error) {
      console.error(`フォールバック キャンペーン停止エラー: ID=${req.params.id}`, error);
      res.status(500).json({ message: 'キャンペーンの停止に失敗しました' });
    }
  });
}

// 発信者番号フォールバック
if (!routerStatus.callerIds) {
  app.get('/api/caller-ids', async (req, res) => {
    try {
      const [callerIds] = await db.query('SELECT * FROM caller_ids WHERE active = 1 ORDER BY created_at DESC');
      res.json(callerIds);
    } catch (error) {
      console.error('発信者番号取得エラー:', error);
      res.status(500).json({ message: '発信者番号の取得に失敗しました' });
    }
  });
}

// テスト発信フォールバック
if (!routerStatus.calls) {
  app.post('/api/calls/test', async (req, res) => {
    try {
      const { phoneNumber, callerID, mockMode } = req.body;
      
      if (!phoneNumber) {
        return res.status(400).json({ message: '発信先電話番号は必須です' });
      }
      
      // 実際のSIP発信を実行
      const callService = require('./services/callService');
      const params = {
        phoneNumber,
        callerID: callerID || process.env.DEFAULT_CALLER_ID || '"Auto Dialer" <03-5946-8520>',
        context: 'autodialer',
        exten: 's',
        priority: 1,
        variables: {
          CAMPAIGN_ID: 'TEST',
          CONTACT_ID: 'TEST',
          TEST_CALL: 'true'
        },
        mockMode
      };
      
      const result = await callService.originate(params);
      
      res.json({
        success: true,
        callId: result.ActionID,
        message: 'テスト発信が開始されました',
        data: result
      });
    } catch (error) {
      console.error('テスト発信エラー:', error);
      res.status(500).json({ message: 'テスト発信に失敗しました', error: error.message });
    }
  });
}

// 404エラーハンドラー
app.use((req, res, next) => {
  console.log(`❌ 404 Not Found: ${req.method} ${req.originalUrl}`);
  res.status(404).json({ 
    message: '要求されたリソースが見つかりません',
    path: req.originalUrl,
    method: req.method,
    timestamp: new Date().toISOString()
  });
});

// エラーハンドリングミドルウェア
app.use((err, req, res, next) => {
  console.error('アプリケーションエラー:', err);
  res.status(500).json({ 
    message: '内部サーバーエラー', 
    error: err.message 
  });
});

// 🔥 修正版: 強化されたサーバー起動処理
const startServer = async () => {
  try {
    console.log('🚀 サーバー初期化開始...');
    
    // 1. データベース接続確認
    await db.query('SELECT 1');
    console.log('✅ データベース接続成功');

    // 2. SIPサービス初期化
    console.log('🔧 SIPサービス初期化中...');
    try {
      const sipService = require('./services/sipService');
      const sipResult = await sipService.connect();
      console.log('📞 SIP初期化結果:', sipResult);
      console.log('📞 SIPアカウント数:', sipService.getAvailableSipAccountCount());
    } catch (sipError) {
      console.error('❌ SIPサービス初期化エラー（続行）:', sipError.message);
    }

    // 3. CallService初期化
    console.log('🔧 CallService初期化中...');
    try {
      const callService = require('./services/callService');
      const callResult = await callService.initialize();
      console.log('📞 CallService初期化結果:', callResult);
    } catch (callError) {
      console.error('❌ CallService初期化エラー（続行）:', callError.message);
    }

    // 4. DialerService手動初期化（重要！）
    console.log('🔧 DialerService手動初期化中...');
    try {
      const dialerService = require('./services/dialerService');
      
      // 🔥 強制的に基本設定
      dialerService.initialized = true;
      dialerService.enabled = true;
      dialerService.errorCount = 0;
      dialerService.dialInterval = 5000; // 5秒間隔
      dialerService.isProcessing = false;
      
      console.log('✅ DialerService手動初期化完了');
      
      // アクティブキャンペーンを確認して自動開始
      setTimeout(async () => {
        try {
          const [activeCampaigns] = await db.query(`
            SELECT c.id, c.name, c.max_concurrent_calls, c.caller_id_id,
                   ci.number as caller_id_number,
                   (SELECT COUNT(*) FROM contacts WHERE campaign_id = c.id AND status = 'pending') as pending_count
            FROM campaigns c
            JOIN caller_ids ci ON c.caller_id_id = ci.id
            WHERE c.status = 'active' AND ci.active = true
          `);
          
          console.log(`📊 アクティブキャンペーン検出: ${activeCampaigns.length}件`);
          
          if (activeCampaigns.length > 0) {
            console.log('🔄 アクティブキャンペーンを自動登録...');
            
            activeCampaigns.forEach(campaign => {
              if (campaign.pending_count > 0) {
                dialerService.activeCampaigns.set(campaign.id, {
                  id: campaign.id,
                  name: campaign.name,
                  maxConcurrentCalls: Math.min(campaign.max_concurrent_calls || 1, 2),
                  callerIdId: campaign.caller_id_id,
                  callerIdNumber: campaign.caller_id_number,
                  activeCalls: 0,
                  status: 'active',
                  lastDialTime: null,
                  failCount: 0
                });
                
                console.log(`✅ キャンペーン${campaign.id} "${campaign.name}" 自動登録 (未処理: ${campaign.pending_count}件)`);
              }
            });
            
            // 自動発信ジョブ開始
            if (dialerService.activeCampaigns.size > 0) {
              dialerService.startDialerJobSafe();
              console.log('🚀 自動発信ジョブ自動開始');
            }
          }
          
        } catch (autoStartError) {
          console.error('自動開始エラー:', autoStartError.message);
        }
      }, 5000); // 5秒後に実行
      
    } catch (dialerError) {
      console.error('❌ DialerService初期化エラー（続行）:', dialerError.message);
    }
    
    // 6. サーバー起動
    server.listen(PORT, '0.0.0.0', () => {
      console.log(`✅ サーバーが起動しました: http://0.0.0.0:${PORT}`);
      console.log('🎯 自動発信システム準備完了');
      console.log('🔗 利用可能なエンドポイント:');
      console.log('  - GET  /health');
      console.log('  - GET  /api/campaigns');
      console.log('  - POST /api/campaigns/:id/start');
      console.log('  - POST /api/calls/test');
    });
    // 🔥 DialerService自動開始の強化（恒久的修正）
    console.log('🔧 DialerService強制自動開始...');
    try {
      const dialerService = require('./services/dialerService');
      
      // 強制的に有効化
      dialerService.enabled = true;
      dialerService.isProcessing = false;
      
      // 10秒後に自動システム開始（他の初期化完了後）
      setTimeout(async () => {
        try {
          if (typeof dialerService.startAutoSystem === 'function') {
            await dialerService.startAutoSystem();
            console.log('✅ DialerService自動システム開始完了');
          } else {
            console.log('⚠️ startAutoSystem メソッドが見つかりません');
          }
        } catch (autoStartError) {
          console.error('DialerService自動開始エラー:', autoStartError.message);
          
          // 30秒後に再試行
          setTimeout(async () => {
            try {
              await dialerService.startAutoSystem();
              console.log('✅ DialerService自動システム再試行成功');
            } catch (retryError) {
              console.error('DialerService再試行失敗:', retryError.message);
            }
          }, 30000);
        }
      }, 10000);
      
    } catch (dialerError) {
      console.error('DialerService初期化エラー:', dialerError.message);
    }
    
  } catch (error) {
    console.error('❌ サーバー起動エラー:', error);
    //process.exit(1);
  }
};

// 未処理エラーハンドリング
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  if (process.env.NODE_ENV === 'production') {
   // process.exit(1);
  }
});

// 終了処理
process.on('SIGINT', async () => {
  console.log('アプリケーションを終了します...');
  
  try {
    if (db.close) {
      await db.close();
    }
    
    server.close(() => {
      console.log('サーバーを正常に終了しました');
      process.exit(0);
    });
  } catch (error) {
    console.error('終了処理エラー:', error);
    process.exit(1);
  }
});

// サーバー起動実行
startServer().catch(err => {
  console.error('startServer実行エラー:', err);
  process.exit(1);
});

