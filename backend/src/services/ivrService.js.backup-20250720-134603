// backend/src/services/ivrService.js - 25秒再生制限版
const logger = require('./logger');
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);
const audioService = require('./audioService');
const db = require('./database');

class IvrService {
  constructor() {
    this.ivrDir = process.env.IVR_SCRIPTS_DIR || path.join(__dirname, '../../ivr-scripts');
    this.initialize();
  }

  async initialize() {
    try {
      // IVRスクリプトディレクトリの存在確認、なければ作成
      await fs.mkdir(this.ivrDir, { recursive: true });
      logger.info(`IVRスクリプトディレクトリを初期化しました: ${this.ivrDir}`);
    } catch (error) {
      logger.error('IVRスクリプトディレクトリの初期化エラー:', error);
    }
  }

  // キャンペーン用のIVRスクリプトを生成（25秒制限付き）
  async generateIvrScript(campaignId) {
    try {
      // キャンペーン情報を取得
      const [campaigns] = await db.query(
        'SELECT c.id, c.name, ci.number as caller_id_number, ci.domain FROM campaigns c JOIN caller_ids ci ON c.caller_id_id = ci.id WHERE c.id = ?',
        [campaignId]
      );
      
      if (campaigns.length === 0) {
        throw new Error('キャンペーンが見つかりません');
      }
      
      const campaign = campaigns[0];
      
      // キャンペーンの音声ファイルを取得
      const audioFiles = await audioService.getCampaignAudio(campaignId);
      
      // 音声ファイルをタイプごとにマッピング
      const audioMap = Array.isArray(audioFiles) ? audioFiles.reduce((map, audio) => {
        if (audio && audio.audio_type) {
          map[audio.audio_type] = audio;
        }
        return map;
      }, {}) : {};
      
      // IVRスクリプトの内容を生成
      let scriptContent = `; IVR Script for Campaign: ${campaign.name} (ID: ${campaignId})\n`;
      scriptContent += `; 25秒再生制限付きバージョン\n\n`;
      
      scriptContent += `[autodialer-campaign-${campaignId}]\n`;
      scriptContent += `exten => s,1,Answer()\n`;
      scriptContent += `  same => n,Wait(1)\n`;
      
      // 25秒の絶対タイムアウトを設定
      scriptContent += `  same => n,Set(TIMEOUT(absolute)=25)\n`;
      scriptContent += `  same => n,Set(PLAYBACK_START=\${EPOCH})\n`;
      scriptContent += `  same => n,Set(LOOP_COUNT=0)\n`;
      
      // 音声ファイルのパスを決定（welcomeとmenuを統合）
      let audioFile = null;
      if (audioMap.welcome) {
        audioFile = `autodialer/${path.basename(audioMap.welcome.filename, path.extname(audioMap.welcome.filename))}`;
      } else if (audioMap.menu) {
        audioFile = `autodialer/${path.basename(audioMap.menu.filename, path.extname(audioMap.menu.filename))}`;
      } else {
        audioFile = 'vm-tempgreeting';
      }
      
      // 制限付きループ再生処理（最大3回）
      // scriptContent += `  same => n(playloop),NoOp(Starting playback loop \${LOOP_COUNT})\n`;
      //scriptContent += `  same => n,Background(${audioFile})\n`;
      //scriptContent += `  same => n,WaitExten(3)\n`;  // 3秒間DTMFを待つ
      //scriptContent += `  same => n,Set(LOOP_COUNT=$[\${LOOP_COUNT} + 1])\n`;
      //scriptContent += `  same => n,GotoIf($[\${LOOP_COUNT} < 3]?playloop)\n`;  // 3回まで
      //scriptContent += `  same => n,Hangup()\n`;  // タイムアウト時は切断
      
      // === 新しいRead()版（確実に動作） ===
　　　scriptContent += `  same => n,Set(ATTEMPTS=0)\n`;
　　　scriptContent += `  same => n(menu),NoOp(=== Playing menu and waiting for DTMF ===)\n`;
　　　scriptContent += `  same => n,System(echo "$(date): Playing menu, DTMF enabled..." >> /tmp/dtmf_debug.log)\n`;
　　　scriptContent += `  same => n,Background(${audioFile})\n`;
　　　scriptContent += `  same => n,WaitExten(5)\n`;
　　　
　　　// 以下の3行を追加
　　　scriptContent += `  same => n,Set(ATTEMPTS=$[\${ATTEMPTS} + 1])\n`;
　　　scriptContent += `  same => n,GotoIf($[\${ATTEMPTS} < 3]?menu)\n`;
　　　scriptContent += `  same => n,Hangup()\n\n`;
　　　// 入力判定
      //scriptContent += `  same => n,GotoIf($["\${DTMF_INPUT}" = "1"]?pressed_1)\n`;
      //scriptContent += `  same => n,GotoIf($["\${DTMF_INPUT}" = "2"]?pressed_2)\n`;
      //scriptContent += `  same => n,GotoIf($["\${DTMF_INPUT}" = "3"]?pressed_3)\n`;
      //scriptContent += `  same => n,GotoIf($["\${DTMF_INPUT}" = "9"]?pressed_9)\n`;

      // 無効な入力または無入力
      //scriptContent += `  same => n,Set(ATTEMPTS=$[\${ATTEMPTS} + 1])\n`;
      //scriptContent += `  same => n,GotoIf($[\${ATTEMPTS} < 3]?menu)\n`;
      //scriptContent += `  same => n,Hangup()\n\n`;

      // ジャンプラベル
      //scriptContent += `  same => n(pressed_1),Goto(1,1)\n`;
      //scriptContent += `  same => n(pressed_2),Goto(2,1)\n`;
      //scriptContent += `  same => n(pressed_3),Goto(3,1)\n`;
      //scriptContent += `  same => n(pressed_9),Goto(9,1)\n\n`;
      
      // 1キー: オペレーター接続
      scriptContent += `exten => 1,1,System(echo "$(date): DTMF 1 pressed - CallID: \${UNIQUEID}" >> /tmp/dtmf_debug.log)\n`;
      scriptContent += `  same => n,NoOp(Operator transfer requested - Key 1)\n`;
      //scriptContent += `  same => n,Set(TIMEOUT(absolute)=)\n`;
      scriptContent += `  same => n,Set(CAMPAIGN_ID=${campaignId})\n`;
      scriptContent += `  same => n,Set(KEYPRESS=1)\n`;
      scriptContent += `  same => n,Goto(operator-transfer-${campaignId},s,1)\n\n`;

      // 2キー: オペレーター接続
      scriptContent += `exten => 2,1,System(echo "$(date): DTMF 2 pressed - CallID: \${UNIQUEID}" >> /tmp/dtmf_debug.log)\n`;
      scriptContent += `  same => n,NoOp(Operator transfer requested - Key 2)\n`;
      //scriptContent += `  same => n,Set(TIMEOUT(absolute)=)\n`;
      scriptContent += `  same => n,Set(CAMPAIGN_ID=${campaignId})\n`;
      scriptContent += `  same => n,Set(KEYPRESS=2)\n`;
      scriptContent += `  same => n,Goto(operator-transfer-${campaignId},s,1)\n\n`; 
      
      // 3キー: オペレーター接続
      scriptContent += `exten => 3,1,System(echo "$(date): DTMF 3 pressed - CallID: \${UNIQUEID}" >> /tmp/dtmf_debug.log)\n`;
      scriptContent += `  same => n,NoOp(Operator transfer requested - Key 3)\n`;
      //scriptContent += `  same => n,Set(TIMEOUT(absolute)=)\n`;
      scriptContent += `  same => n,Set(CAMPAIGN_ID=${campaignId})\n`;
      scriptContent += `  same => n,Set(KEYPRESS=3)\n`;
      scriptContent += `  same => n,Goto(operator-transfer-${campaignId},s,1)\n\n`;
      
      // 9キー: 通話終了（DNCリストに追加）
      scriptContent += `exten => 9,1,System(echo "$(date): DTMF 9 pressed - CallID: \${UNIQUEID}" >> /tmp/dtmf_debug.log)\n`;
      scriptContent += `  same => n,NoOp(DNC requested)\n`;
      //scriptContent += `  same => n,Set(TIMEOUT(absolute)=)\n`;
      scriptContent += `  same => n,Set(CAMPAIGN_ID=${campaignId})\n`;
      scriptContent += `  same => n,Set(KEYPRESS=9)\n`;
      scriptContent += `  same => n,Playback(vm-goodbye)\n`;
      scriptContent += `  same => n,Hangup()\n\n`;
      
      // タイムアウト（25秒経過）
      scriptContent += `exten => T,1,NoOp(Absolute timeout reached - 25 seconds)\n`;
      scriptContent += `  same => n,Playback(goodbye)\n`;
      scriptContent += `  same => n,Hangup()\n\n`;
      
      // その他のタイムアウト
      scriptContent += `exten => t,1,NoOp(Input timeout occurred)\n`;
      scriptContent += `  same => n,Playback(goodbye)\n`;
      scriptContent += `  same => n,Hangup()\n\n`;
      
      // 無効なキー入力
      scriptContent += `exten => i,1,NoOp(Invalid input)\n`;
      scriptContent += `  same => n,Playback(invalid)\n`;
      scriptContent += `  same => n,Goto(s,playloop)\n\n`;
      
      // 通話終了時の処理
      scriptContent += `exten => h,1,NoOp(Hangup handler)\n`;
      scriptContent += `  same => n,System(curl -X POST http://localhost:5000/api/callback/call-end -d "callId=${campaignId}-\${UNIQUEID}&duration=\${ANSWEREDTIME}&disposition=\${DIALSTATUS}&keypress=\${KEYPRESS}")\n`;
      
      // operator-transferコンテキスト追加
      scriptContent += `\n; operator-transfer context\n`;
      scriptContent += `[operator-transfer-${campaignId}]\n`;
      scriptContent += `exten => s,1,NoOp(=== OPERATOR TRANSFER START ===)\n`;
      scriptContent += `  same => n,System(echo "$(date): Transfer Start - CallID: \${UNIQUEID}, Phone: \${CALLERID(num)}, Key: \${KEYPRESS}" >> /tmp/dtmf_debug.log)\n`;
      scriptContent += `  same => n,Set(TRANSFER_CALL_ID=\${UNIQUEID})\n`;
      scriptContent += `  same => n,Set(TRANSFER_CAMPAIGN_ID=\${CAMPAIGN_ID})\n`;
      scriptContent += `  same => n,Set(CONTACT_PHONE=\${CALLERID(num)})\n`;
      scriptContent += `  same => n,NoOp(Variables: CallID=\${TRANSFER_CALL_ID}, Phone=\${CONTACT_PHONE}, Key=\${KEYPRESS})\n`;
      scriptContent += `  same => n,System(curl -X POST http://localhost:5000/api/calls/transfer/dtmf -H "Content-Type: application/json" -d "{\\"callId\\": \\"\${TRANSFER_CALL_ID}\\", \\"originalNumber\\": \\"\${CONTACT_PHONE}\\", \\"keypress\\": \\"\${KEYPRESS}\\", \\"campaignId\\": \\"\${TRANSFER_CAMPAIGN_ID}\\"}" 2>&1 | tee -a /tmp/dtmf_debug.log)\n`;
      scriptContent += `  same => n,Wait(2)\n`;
      scriptContent += `  same => n,Playback(one-moment-please)\n`;
      scriptContent += `  same => n,Hangup()\n\n`; 
      
scriptContent += `exten => s,1,NoOp(=== OPERATOR TRANSFER START ===)\n`;
scriptContent += `  same => n,System(echo "$(date): Transfer Start - CallID: \${UNIQUEID}, Phone: \${CALLERID(num)}, Key: \${KEYPRESS}" >> /tmp/dtmf_debug.log)\n`;
scriptContent += `  same => n,Set(TRANSFER_CALL_ID=\${UNIQUEID})\n`;
scriptContent += `  same => n,Set(TRANSFER_CAMPAIGN_ID=\${CAMPAIGN_ID})\n`;
scriptContent += `  same => n,Set(CONTACT_PHONE=\${CALLERID(num)})\n`;
scriptContent += `  same => n,NoOp(Variables: CallID=\${TRANSFER_CALL_ID}, Phone=\${CONTACT_PHONE}, Key=\${KEYPRESS})\n`;
scriptContent += `  same => n,System(curl -s -X POST http://localhost:5000/api/calls/transfer/dtmf -H "Content-Type: application/json" -d "{\\"callId\\": \\"\${TRANSFER_CALL_ID}\\", \\"originalNumber\\": \\"\${CONTACT_PHONE}\\", \\"keypress\\": \\"\${KEYPRESS}\\", \\"campaignId\\": \\"\${TRANSFER_CAMPAIGN_ID}\\"}" 2>&1 | tee -a /tmp/dtmf_debug.log)\n`;
scriptContent += `  same => n,Wait(1)\n`;
scriptContent += `  same => n,Playback(pls-wait-connect-call)\n`;

// デフォルトの転送先設定
scriptContent += `  same => n,GotoIf($["\\${KEYPRESS}" = "1"]?transfer1)\n`;
scriptContent += `  same => n,GotoIf($["\\${KEYPRESS}" = "2"]?transfer2)\n`;
scriptContent += `  same => n,GotoIf($["\\${KEYPRESS}" = "3"]?transfer3)\n`;
scriptContent += `  same => n,Hangup()\n`;
scriptContent += `  same => n(transfer1),NoOp(Transferring to 03500001)\n`;
scriptContent += `  same => n,Dial(PJSIP/03500001,30,tT)\n`;
scriptContent += `  same => n,Hangup()\n`;
scriptContent += `  same => n(transfer2),NoOp(Transferring to 03500002)\n`;
scriptContent += `  same => n,Dial(PJSIP/03500002,30,tT)\n`;
scriptContent += `  same => n,Hangup()\n`;
scriptContent += `  same => n(transfer3),NoOp(Transferring to 03500003)\n`;
scriptContent += `  same => n,Dial(PJSIP/03500003,30,tT)\n`;
scriptContent += `  same => n,Hangup()\n\n`; 
      // ファイルに保存
      const scriptPath = path.join(this.ivrDir, `campaign-${campaignId}.conf`);
      await fs.writeFile(scriptPath, scriptContent);
      
      logger.info(`25秒制限付きキャンペーンIVRスクリプトを生成しました: ${scriptPath}`);
      
      return {
        path: scriptPath,
        content: scriptContent
      };
    } catch (error) {
      logger.error(`IVRスクリプト生成エラー: Campaign=${campaignId}`, error);
      throw error;
    }
  }

  // デフォルトのIVRスクリプトを生成（テスト発信用）
  async generateDefaultIvrScript() {
    try {
      let scriptContent = `; Default IVR Script for Test Calls\n\n`;
      
      scriptContent += `[autodialer-test]\n`;
      scriptContent += `exten => s,1,Answer()\n`;
      scriptContent += `  same => n,Wait(1)\n`;
      scriptContent += `  same => n,Playback(vm-greeting)\n`;
      scriptContent += `  same => n,Playback(vm-tempgreeting)\n`;
      scriptContent += `  same => n,WaitExten(10)\n\n`;
      
      // 1キー: オペレーター接続
      scriptContent += `exten => 1,1,NoOp(Operator transfer requested)\n`;
      scriptContent += `  same => n,Set(CAMPAIGN_ID=test)\n`;
      scriptContent += `  same => n,Set(KEYPRESS=1)\n`;
      scriptContent += `  same => n,Playback(one-moment-please)\n`;
      scriptContent += `  same => n,Hangup()\n\n`;
      
      // 9キー: 通話終了（DNCリストに追加）
      scriptContent += `exten => 9,1,NoOp(DNC requested)\n`;
      scriptContent += `  same => n,Set(KEYPRESS=9)\n`;
      scriptContent += `  same => n,Playback(vm-goodbye)\n`;
      scriptContent += `  same => n,Hangup()\n\n`;
      
      // タイムアウトやその他のキー入力
      scriptContent += `exten => t,1,NoOp(Timeout occurred)\n`;
      scriptContent += `  same => n,Playback(goodbye)\n`;
      scriptContent += `  same => n,Hangup()\n\n`;
      
      // 無効なキー入力
      scriptContent += `exten => i,1,NoOp(Invalid input)\n`;
      scriptContent += `  same => n,Playback(invalid)\n`;
      scriptContent += `  same => n,Goto(s,4)\n\n`;
      
      // 通話終了時の処理
      scriptContent += `exten => h,1,NoOp(Hangup handler)\n`;
      scriptContent += `  same => n,System(curl -X POST http://localhost:5000/api/callback/call-end -d "callId=test-\${UNIQUEID}&duration=\${ANSWEREDTIME}&disposition=\${DIALSTATUS}&keypress=\${KEYPRESS}")\n`;
      
      // ファイルに保存
      const scriptPath = path.join(this.ivrDir, 'default-test.conf');
      await fs.writeFile(scriptPath, scriptContent);
      
      logger.info(`デフォルトIVRスクリプトを生成しました: ${scriptPath}`);
      
      return {
        path: scriptPath,
        content: scriptContent
      };
    } catch (error) {
      logger.error('デフォルトIVRスクリプト生成エラー:', error);
      throw error;
    }
  }

  // IVRスクリプトをファイルに保存
  async saveIvrScript(campaignId, script) {
    try {
      if (!script) {
        logger.warn(`空のスクリプト内容です: キャンペーンID ${campaignId}`);
        return false;
      }
      
      const scriptPath = path.join(this.ivrDir, `campaign-${campaignId}.conf`);
      await fs.writeFile(scriptPath, script);
      
      logger.info(`IVRスクリプトを保存しました: ${scriptPath}`);
      
      return {
        path: scriptPath,
        success: true
      };
    } catch (error) {
      logger.error(`IVRスクリプト保存エラー: ${error.message}`);
      throw error;
    }
  }

  async deployIvrScripts() {
    try {
      logger.info('全キャンペーンのIVRスクリプトをデプロイ中...');
      
      // アクティブなキャンペーンを取得
      const [campaigns] = await db.query(`
        SELECT id, name FROM campaigns 
        WHERE status IN ('active', 'paused') 
        ORDER BY id
      `);
      
      if (campaigns.length === 0) {
        logger.info('デプロイ対象のキャンペーンがありません');
        return true;
      }
      
      let successCount = 0;
      let errorCount = 0;
      
      // 各キャンペーンのIVRスクリプトをデプロイ
      for (const campaign of campaigns) {
        try {
          await this.deployIvrScript(campaign.id);
          successCount++;
          logger.info(`キャンペーン ${campaign.id} (${campaign.name}) デプロイ成功`);
        } catch (error) {
          errorCount++;
          logger.error(`キャンペーン ${campaign.id} (${campaign.name}) デプロイ失敗:`, error.message);
        }
      }
      
      logger.info(`IVRスクリプト一括デプロイ完了: 成功=${successCount}, 失敗=${errorCount}`);
      return true;
    } catch (error) {
      logger.error('IVRスクリプト一括デプロイエラー:', error);
      throw error;
    }
  }

  // 🚀 完全実装版: 個別キャンペーン用のIVRスクリプトデプロイ（100%完成）
  async deployIvrScript(campaignId) {
    try {
      logger.info(`🚀 キャンペーン ${campaignId} のIVRスクリプト完全デプロイ開始...`);
      
      // Step 1: IVRスクリプト生成
      logger.info(`📝 Step 1: IVRスクリプト生成中...`);
      const scriptResult = await this.generateIvrScript(campaignId);
      
      if (!scriptResult || !scriptResult.path) {
        throw new Error('IVRスクリプトの生成に失敗しました');
      }
      
      const scriptPath = scriptResult.path;
      const scriptFileName = path.basename(scriptPath);
      
      logger.info(`✅ IVRスクリプト生成完了: ${scriptPath}`);
      
      // Step 2: extensions.confへのinclude追加（重複チェック付き）
      logger.info(`📝 Step 2: extensions.confへのinclude追加中...`);
// //       const includeAdded = await this.addIncludeToExtensionsConf(scriptFileName, campaignId);
      
//       if (!includeAdded) {
//         logger.info(`ℹ️ include追加スキップ（既存または不要）`);
//       }
      
      // Step 3: Asterisk dialplan reload
      logger.info(`📝 Step 3: Asterisk dialplan reload実行中...`);
      const reloadSuccess = await this.reloadAsteriskDialplan();
      
      if (!reloadSuccess) {
        logger.warn('⚠️ Asterisk dialplan reloadに失敗しましたが、処理を続行します');
      }
      
      // Step 4: デプロイ状態をデータベースに記録
      logger.info(`📝 Step 4: データベース記録中...`);
      try {
        await db.query(
          'UPDATE campaigns SET ivr_deployed = true, ivr_deploy_time = NOW() WHERE id = ?',
          [campaignId]
        );
        logger.info(`✅ データベース記録完了`);
      } catch (dbError) {
        logger.warn('⚠️ データベース記録エラー（処理は続行）:', dbError.message);
      }
      
      // Step 5: デプロイ検証
      logger.info(`📝 Step 5: デプロイ検証中...`);
      const contextExists = await this.verifyIvrContext(campaignId);
      
      if (contextExists) {
        logger.info(`✅ キャンペーン ${campaignId} のIVRスクリプト完全デプロイ成功！`);
        logger.info(`🎯 コンテキスト "autodialer-campaign-${campaignId}" がAsteriskに正常登録されました`);
      } else {
        logger.warn(`⚠️ コンテキスト検証失敗 - 手動確認が必要です`);
      }
      
      return {
        success: true,
        scriptPath: scriptPath,
        contextName: `autodialer-campaign-${campaignId}`,
        includeAdded: true, // includeAdded,
        reloadSuccess: reloadSuccess,
        verified: contextExists,
        message: `キャンペーン ${campaignId} のIVRスクリプトが完全デプロイされました`
      };
      
    } catch (error) {
      logger.error(`❌ IVRスクリプト完全デプロイエラー: Campaign=${campaignId}`, error);
      throw new Error(`IVRスクリプトの完全デプロイに失敗しました: ${error.message}`);
    }
  }

  // 🔧 サポートメソッド1: extensions.confへのinclude追加
  async addIncludeToExtensionsConf(scriptFileName, campaignId) {
    try {
      const extensionsConfPath = '/etc/asterisk/extensions.conf';
      const includeStatement = `#include "/var/www/autodialer/backend/ivr-scripts/${scriptFileName}"`;
      
      logger.info(`🔧 extensions.conf include追加: ${includeStatement}`);
      
      // 現在のextensions.confを読み込み
      let extensionsContent = '';
      try {
        extensionsContent = await fs.readFile(extensionsConfPath, 'utf8');
      } catch (readError) {
        logger.error(`❌ extensions.conf読み込みエラー: ${readError.message}`);
        return false;
      }
      
      // 重複チェック
      if (extensionsContent.includes(scriptFileName)) {
        logger.info(`ℹ️ include文は既に存在します: ${scriptFileName}`);
        return true; // 既に存在するので成功とみなす
      }
      
      // include文を末尾に追加
      const updatedContent = extensionsContent + '\n' + includeStatement + '\n';
      
      // ファイルに書き込み
      await fs.writeFile(extensionsConfPath, updatedContent, 'utf8');
      
      logger.info(`✅ extensions.confにinclude追加完了: campaign-${campaignId}.conf`);
      return true;
      
    } catch (error) {
      logger.error(`❌ extensions.conf include追加エラー:`, error);
      return false;
    }
  }

  // 🔧 サポートメソッド2: Asterisk dialplan reload
  async reloadAsteriskDialplan() {
    try {
      logger.info(`🔄 Asterisk dialplan reload実行中...`);
      
      // Asterisk CLIコマンドでdialplan reload
      const { stdout, stderr } = await execAsync('sudo asterisk -rx "dialplan reload"');
      
      if (stderr && !stderr.includes('Warning')) {
        logger.warn(`⚠️ Asterisk reload警告: ${stderr}`);
      }
      
      if (stdout.includes('Dialplan reloaded') || stdout.includes('done')) {
        logger.info(`✅ Asterisk dialplan reload成功: ${stdout.trim()}`);
        return true;
      } else {
        logger.warn(`⚠️ Asterisk reload結果不明: ${stdout}`);
        return false;
      }
      
    } catch (error) {
      logger.error(`❌ Asterisk dialplan reloadエラー:`, error);
      
      // フォールバック: systemctl reload
      try {
        logger.info(`🔄 フォールバック: systemctl reload asterisk`);
        await execAsync('sudo systemctl reload asterisk');
        logger.info(`✅ systemctl reload完了`);
        return true;
      } catch (systemctlError) {
        logger.error(`❌ systemctl reloadもエラー:`, systemctlError);
        return false;
      }
    }
  }

  // 🔧 サポートメソッド3: IVRコンテキスト検証
  async verifyIvrContext(campaignId) {
    try {
      const contextName = `autodialer-campaign-${campaignId}`;
      logger.info(`🔍 コンテキスト検証中: ${contextName}`);
      
      // Asterisk CLIでコンテキスト存在確認
      const { stdout, stderr } = await execAsync(`sudo asterisk -rx "dialplan show ${contextName}"`);
      
      if (stdout.includes('does not exist') || stdout.includes('No such context')) {
        logger.warn(`⚠️ コンテキストが存在しません: ${contextName}`);
        return false;
      }
      
      if (stdout.includes('Extension') && stdout.includes('Priority')) {
        logger.info(`✅ コンテキスト検証成功: ${contextName}`);
        logger.debug(`コンテキスト内容プレビュー: ${stdout.substring(0, 200)}...`);
        return true;
      }
      
      logger.warn(`⚠️ コンテキスト検証結果不明: ${stdout}`);
      return false;
      
    } catch (error) {
      logger.error(`❌ コンテキスト検証エラー:`, error);
      return false;
    }
  }
}

module.exports = new IvrService();
