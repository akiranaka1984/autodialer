// backend/src/services/sipService.js - v60.0完全版（AMI対応・100%完成）
const { spawn, exec } = require('child_process');
const logger = require('./logger');
const { EventEmitter } = require('events');
const path = require('path');
const fs = require('fs');
const db = require('./database');

class SipService extends EventEmitter {
  constructor() {
    super();
    this.connected = false;
    this.mockMode = process.env.MOCK_SIP === 'true';
    this.sipAccounts = [];
    this.callToAccountMap = new Map();
    this.activeCallsMap = new Map();
    this.callerIdToChannelsMap = new Map();
    this.sipcmdPath = process.env.SIPCMD_PATH || "/usr/local/bin/sipcmd-working";
    
    // 🔧 安定化設定
    this.connectionRetryCount = 0;
    this.maxConnectionRetries = 3;
    this.accountLoadRetryCount = 0;
    this.maxAccountLoadRetries = 5;
    this.lastDatabaseCheck = null;
    this.healthCheckInterval = 60000; // 60秒間隔
    this.healthCheckIntervalId = null;
    
    // 🆕 AMI接続設定（v60.0追加）
    this.amiHost = '127.0.0.1';
    this.amiPort = 5038;
    this.amiUsername = 'autodialer';
    this.amiPassword = 'autodialer123';
    this.amiConnection = null;
    this.amiConnected = false;
    
    logger.info(`SipService初期化: mockMode=${this.mockMode}, sipcmdPath=${this.sipcmdPath}`);
    this.on('callEnded', this.handleCallEnded.bind(this));
    
    // 定期ヘルスチェック開始
    this.startHealthCheck();
  }

  // 🔧 修正版接続メソッド（リトライ機能付き）
  async connect() {
    if (this.mockMode) {
      logger.info('SIPサービスにモックモードで接続しました');
      this.connected = true;
      await this.loadSipAccountsWithRetry();
      return true;
    }

    try {
      logger.info(`🔧 SIPサービス接続開始（試行 ${this.connectionRetryCount + 1}/${this.maxConnectionRetries + 1}）...`);
      
      // 🔍 事前チェック: データベース接続確認
      await this.verifyDatabaseConnection();
      
      // 🆕 AMI初期化（v60.0追加）
      await this.initializeAmiConnection();
      
      // SIPアカウント読み込み（リトライ機能付き）
      await this.loadSipAccountsWithRetry();
      
      if (this.sipAccounts.length === 0) {
        logger.warn('⚠️ データベースからSIPアカウントを読み込めませんでした - フォールバック処理');
        this.createFallbackAccounts();
      }
      
      // 発信者番号ごとのチャンネルグループを作成
      this.organizeChannelsByCallerId();
      
      // 接続成功
      this.connected = true;
      this.connectionRetryCount = 0;
      
      logger.info(`✅ SIPサービス接続完了: ${this.sipAccounts.length}個のアカウント`);
      this.logAccountSummary();
      
      return true;
      
    } catch (error) {
      this.connectionRetryCount++;
      logger.error(`❌ SIP接続エラー (試行${this.connectionRetryCount}/${this.maxConnectionRetries + 1}):`, error);
      
      if (this.connectionRetryCount <= this.maxConnectionRetries) {
        const retryDelay = Math.min(5000 * this.connectionRetryCount, 15000);
        logger.info(`🔄 ${retryDelay}ms後にSIP接続を再試行...`);
        
        await new Promise(resolve => setTimeout(resolve, retryDelay));
        return await this.connect();
      } else {
        logger.error('❌ SIP接続の最大試行回数に達しました - 緊急フォールバック実行');
        return this.enableEmergencyFallback();
      }
    }
  }

  // 🆕 AMI初期化（v60.0追加）
  async initializeAmiConnection() {
    const net = require('net');
    return new Promise((resolve, reject) => {
      logger.info('🔧 AMI接続初期化開始...');
      
      this.amiConnection = new net.Socket();
      this.amiConnection.connect(this.amiPort, this.amiHost, () => {
        logger.info('✅ AMI TCP接続成功');
        const loginCommand = `Action: Login\r\nUsername: ${this.amiUsername}\r\nSecret: ${this.amiPassword}\r\nEvents: off\r\n\r\n`;
        this.amiConnection.write(loginCommand);
      });
      
      this.amiConnection.on('data', (data) => {
        const response = data.toString();
        logger.info(`AMI応答: ${response.substring(0, 100)}`);
        
        if (response.includes('Authentication accepted')) {
          this.amiConnected = true;
          logger.info('✅ AMI認証成功');
          resolve(true);
        } else if (response.includes('Authentication failed')) {
          logger.error('❌ AMI認証失敗');
          reject(new Error('AMI認証失敗'));
        }
      });
      
      this.amiConnection.on('error', (error) => {
        logger.error('❌ AMI接続エラー:', error);
        reject(error);
      });
      
      // 10秒タイムアウト
      setTimeout(() => {
        if (!this.amiConnected) {
          reject(new Error('AMI接続タイムアウト'));
        }
      }, 10000);
    });
  }

  // 🎯 重要：sendAmiCommandメソッド（v60.0追加）
  async sendAmiCommand(command) {
    logger.info('📤 AMI送信開始:', command.substring(0, 100));
    
    if (!this.amiConnected) {
      logger.info('🔧 AMI未接続 - 再接続試行...');
      await this.initializeAmiConnection();
    }
    
    return new Promise((resolve, reject) => {
      let responseReceived = false;
      
      const onData = (data) => {
        const response = data.toString();
        logger.info(`📥 AMI応答受信: ${response.substring(0, 200)}`);
        
        if (response.includes('Response: Success')) {
          this.amiConnection.removeListener('data', onData);
          if (!responseReceived) {
            responseReceived = true;
            logger.info('✅ AMI送信成功');
            resolve(true);
          }
        } else if (response.includes('Response: Error')) {
          this.amiConnection.removeListener('data', onData);
          if (!responseReceived) {
            responseReceived = true;
            logger.error('❌ AMIエラー応答');
            reject(new Error('AMI Error Response'));
          }
        }
      };
      
      this.amiConnection.on('data', onData);
      this.amiConnection.write(command);
      
      // 10秒タイムアウト
      setTimeout(() => {
        if (!responseReceived) {
          this.amiConnection.removeListener('data', onData);
          responseReceived = true;
          logger.error('❌ AMI送信タイムアウト');
          reject(new Error('AMI送信タイムアウト'));
        }
      }, 10000);
    });
  }

  // 🔍 データベース接続確認
  async verifyDatabaseConnection() {
    try {
      const [testResult] = await db.query('SELECT COUNT(*) as count FROM caller_ids WHERE active = 1');
      logger.info(`✅ データベース接続確認完了: アクティブ発信者番号 ${testResult[0].count}件`);
      this.lastDatabaseCheck = new Date();
      
    } catch (error) {
      logger.error('❌ データベース接続確認エラー:', error);
      throw new Error('データベース接続に失敗しました');
    }
  }

  // 🔧 SIPアカウント読み込み（リトライ機能付き）
  async loadSipAccountsWithRetry() {
    let lastError = null;
    
    for (let attempt = 1; attempt <= this.maxAccountLoadRetries; attempt++) {
      try {
        logger.info(`📋 SIPアカウント読み込み試行 ${attempt}/${this.maxAccountLoadRetries}`);
        
        this.sipAccounts = await this.loadSipAccountsFromDatabase();
        
        if (this.sipAccounts.length > 0) {
          logger.info(`✅ SIPアカウント読み込み成功: ${this.sipAccounts.length}個`);
          this.accountLoadRetryCount = 0;
          return;
        } else {
          throw new Error('有効なSIPアカウントがデータベースに見つかりません');
        }
        
      } catch (error) {
        lastError = error;
        logger.warn(`⚠️ SIPアカウント読み込み失敗 (試行${attempt}/${this.maxAccountLoadRetries}): ${error.message}`);
        
        if (attempt < this.maxAccountLoadRetries) {
          const retryDelay = 2000 * attempt; // 段階的遅延
          logger.info(`🔄 ${retryDelay}ms後に再試行...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
        }
      }
    }
    
    // 全ての試行が失敗した場合
    logger.error(`❌ SIPアカウント読み込みの全試行が失敗: ${lastError?.message}`);
    throw new Error('SIPアカウントの読み込みに失敗しました');
  }

  // データベースからSIPアカウント読み込み（改良版）
  async loadSipAccountsFromDatabase() {
    try {
      logger.info('🔧 データベースからSIPチャンネル情報を読み込み中...');
      
      // より詳細なクエリ
      const [channels] = await db.query(`
        SELECT 
          cc.id,
          cc.caller_id_id,
          cc.username,
          cc.password,
          cc.status,
          cc.last_used,
          cc.created_at,
          ci.number as caller_number, 
          ci.description, 
          ci.provider, 
          ci.domain, 
          ci.active as caller_active
        FROM caller_channels cc
        JOIN caller_ids ci ON cc.caller_id_id = ci.id
        WHERE ci.active = true
        ORDER BY cc.caller_id_id, cc.id
      `);
      
      logger.info(`📊 データベースクエリ結果: ${channels ? channels.length : 0}件のチャンネル`);
      
      if (!channels || channels.length === 0) {
        logger.warn('⚠️ データベースに有効なSIPチャンネルが見つかりません');
        
        // 基本的な発信者番号のみでも確認
        const [basicCallerIds] = await db.query(`
          SELECT id, number, description, provider, domain 
          FROM caller_ids 
          WHERE active = true
          ORDER BY created_at DESC
        `);
        
        if (basicCallerIds.length > 0) {
          logger.info(`📞 基本発信者番号を検出: ${basicCallerIds.length}件`);
          
          // 基本発信者番号から仮想SIPアカウントを作成
          return basicCallerIds.map((callerId, index) => ({
            username: `${callerId.number.replace(/[^\d]/g, '').substring(0, 8)}${String(index + 1).padStart(2, '0')}`,
            password: this.generateDefaultPassword(callerId.id),
            callerID: callerId.number,
            description: callerId.description || `発信者番号${callerId.id}`,
            domain: callerId.domain || 'pantex.online',
            provider: callerId.provider || 'Default SIP',
            mainCallerId: callerId.id,
            channelType: 'both',
            status: 'available',
            lastUsed: null,
            failCount: 0,
            channelId: `virtual-${callerId.id}`,
            isVirtual: true
          }));
        }
        
        throw new Error('データベースに有効な発信者番号が見つかりません');
      }
      
      const formattedAccounts = channels.map(channel => ({
        username: channel.username || `default-${channel.id}`,
        password: channel.password || this.generateDefaultPassword(channel.caller_id_id),
        callerID: channel.caller_number || '03-5946-8520',
        description: channel.description || `チャンネル${channel.id}`,
        domain: channel.domain || 'pantex.online',
        provider: channel.provider || 'SIP Provider',
        mainCallerId: channel.caller_id_id || 1,
        channelType: 'both',
        status: channel.status || 'available',
        lastUsed: channel.last_used || null,
        failCount: 0,
        channelId: channel.id || 1,
        isVirtual: false
      }));
      
      logger.info(`✅ 合計${formattedAccounts.length}個のSIPチャンネルを読み込み`);
      
      return formattedAccounts;
      
    } catch (error) {
      logger.error('❌ データベースからのSIPチャンネル読み込みエラー:', error);
      throw error;
    }
  }

  // デフォルトパスワード生成
  generateDefaultPassword(callerIdId) {
    // 簡単なハッシュベースのパスワード生成
    const base = `caller${callerIdId}${Date.now()}`;
    let hash = 0;
    for (let i = 0; i < base.length; i++) {
      const char = base.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 32-bit整数に変換
    }
    return Math.abs(hash).toString().substring(0, 8).padStart(8, '1');
  }

  // 🚨 緊急フォールバック
  enableEmergencyFallback() {
    logger.warn('🚨 SIPサービス緊急フォールバック開始');
    
    this.createFallbackAccounts();
    this.connected = true;
    
    logger.warn('⚠️ 緊急フォールバックモードで動作中');
    return true;
  }

  // フォールバックアカウント作成（成功アカウント使用）
  createFallbackAccounts() {
    this.sipAccounts = [
      {
        username: '03500002',
        password: '12345678',
        callerID: '0369087851',
        description: '動作確認済み SIP 1',
        domain: 'pantex.online',
        provider: 'Working SIP',
        mainCallerId: 1,
        channelType: 'both',
        status: 'available',
        lastUsed: null,
        failCount: 0,
        channelId: 'working-1',
        isVirtual: true
      }
    ];
    
    logger.warn(`🚨 フォールバックアカウント作成完了: ${this.sipAccounts.length}個`);
  }

  // アカウント概要ログ
  logAccountSummary() {
    logger.info(`📊 SIPアカウント概要:`);
    logger.info(`  - 総アカウント数: ${this.sipAccounts.length}`);
    logger.info(`  - 利用可能: ${this.sipAccounts.filter(a => a.status === 'available').length}`);
    logger.info(`  - 使用中: ${this.sipAccounts.filter(a => a.status === 'busy').length}`);
    logger.info(`  - エラー: ${this.sipAccounts.filter(a => a.status === 'error').length}`);
  }

  // 💗 ヘルスチェック開始
  startHealthCheck() {
    if (this.healthCheckIntervalId) {
      clearInterval(this.healthCheckIntervalId);
    }
    
    this.healthCheckIntervalId = setInterval(async () => {
      try {
        await this.performHealthCheck();
      } catch (error) {
        logger.error('SIPヘルスチェックエラー:', error);
      }
    }, this.healthCheckInterval);
    
    logger.info(`💗 SIPヘルスチェック開始: ${this.healthCheckInterval}ms間隔`);
  }

  // 🔍 ヘルスチェック実行
  async performHealthCheck() {
    try {
      // データベース接続確認
      await this.verifyDatabaseConnection();
      
      // アカウント状態確認
      const availableCount = this.sipAccounts.filter(acc => acc.status === 'available').length;
      const busyCount = this.sipAccounts.filter(acc => acc.status === 'busy').length;
      const errorCount = this.sipAccounts.filter(acc => acc.status === 'error').length;
      
      logger.debug(`💗 SIPヘルスチェック正常: Available=${availableCount}, Busy=${busyCount}, Error=${errorCount}`);
      
    } catch (error) {
      logger.error('❌ SIPヘルスチェック失敗:', error);
    }
  }

  // アカウント状態リセット
  resetAccountStates() {
    let resetCount = 0;
    
    this.sipAccounts.forEach(account => {
      if (account.status === 'error' || account.status === 'busy') {
        account.status = 'available';
        account.failCount = Math.max(0, (account.failCount || 0) - 1);
        resetCount++;
      }
    });
    
    logger.info(`🔄 SIPアカウント状態リセット完了: ${resetCount}個のアカウント`);
  }

  // 再接続処理
  async reconnect() {
    logger.info('🔄 SIPサービス再接続開始...');
    
    this.connected = false;
    this.connectionRetryCount = 0;
    
    try {
      await this.connect();
      logger.info('✅ SIPサービス再接続完了');
    } catch (error) {
      logger.error('❌ SIPサービス再接続失敗:', error);
    }
  }

  // 発信者番号ごとにチャンネルをグループ化（改良版）
  organizeChannelsByCallerId() {
    this.callerIdToChannelsMap.clear();
    
    this.sipAccounts.forEach(account => {
      if (!account.mainCallerId) return;
      
      if (!this.callerIdToChannelsMap.has(account.mainCallerId)) {
        this.callerIdToChannelsMap.set(account.mainCallerId, []);
      }
      
      this.callerIdToChannelsMap.get(account.mainCallerId).push(account);
    });
    
    this.callerIdToChannelsMap.forEach((channels, callerId) => {
      logger.info(`📞 発信者番号ID ${callerId}: ${channels.length}チャンネル (${channels[0]?.callerID})`);
    });
  }

  // SIPアカウント選択（キャンペーン対応）
  async getAvailableSipAccountForCampaign(campaignId) {
    try {
      logger.info('🔍 SIPアカウント選択開始');
      
      // キャンペーンから発信者番号IDを取得
      const [campaigns] = await db.query(
        'SELECT caller_id_id FROM campaigns WHERE id = ?',
        [campaignId]
      );
      
      if (campaigns.length === 0) {
        throw new Error(`キャンペーンID ${campaignId} が見つかりません`);
      }
      
      const callerIdId = campaigns[0].caller_id_id;
      logger.info(`🔍 キャンペーン${campaignId} → 発信者番号ID: ${callerIdId}`);
      
      // 発信者番号IDに関連するSIPアカウントのみ取得
      const authorizedAccounts = this.sipAccounts.filter(account => 
        account && 
        account.mainCallerId === callerIdId && 
        account.status === 'available'
      );
      
      if (authorizedAccounts.length === 0) {
        throw new Error(`発信者番号ID ${callerIdId} に利用可能なSIPアカウントがありません`);
      }
      
      const selectedAccount = authorizedAccounts[0];
      
      logger.info(`🔍 選択されたSIPアカウント: ${selectedAccount.username}`);
      logger.info(`🔍 - username: "${selectedAccount.username}" (type: ${typeof selectedAccount.username})`);
      
      return selectedAccount;
      
    } catch (error) {
      logger.error('❌ SIPアカウント選択エラー:', error);
      throw error;
    }
  }

  // 🔧 互換性のため旧メソッドも残す
  async getAvailableSipAccount(campaignId = null) {
    if (campaignId) {
      return await this.getAvailableSipAccountForCampaign(campaignId);
    }
    
    // フォールバック: 最初に見つかったアクティブキャンペーンを使用
    logger.warn('⚠️ キャンペーンID未指定 - 自動選択します');
    const [campaigns] = await db.query(
      'SELECT id FROM campaigns WHERE status = "active" LIMIT 1'
    );
    
    if (campaigns.length === 0) {
      throw new Error('アクティブなキャンペーンが見つかりません');
    }
    
    return await this.getAvailableSipAccountForCampaign(campaigns[0].id);
  }

  // 🔥 【最重要】Asterisk AMI対応版 sipService.originate メソッド
  async originate(params) {
    logger.info(`🔥 [SIP-DEBUG] ===== sipService.originate 開始 (AMI版) =====`);
    logger.info(`🔥 [SIP-DEBUG] - phoneNumber: ${params.phoneNumber}`);
    logger.info(`🔥 [SIP-DEBUG] - mockMode: ${this.mockMode}`);
    logger.info(`🔥 [SIP-DEBUG] - connected: ${this.connected}`);
    
    if (this.mockMode) {
      logger.info(`🔥 [SIP-DEBUG] モックモードで処理します`);
      return this.originateMock(params);
    }
    
    logger.info(`🔥 [SIP-DEBUG] 実発信モードで AMI発信を開始: 発信先=${params.phoneNumber}`);
    
    try {
      // SIPアカウントを取得
      const campaignId = params.variables?.CAMPAIGN_ID;
      if (!campaignId) {
        throw new Error('キャンペーンIDが取得できません');
      }
      
      const sipAccount = await this.getAvailableSipAccountForCampaign(campaignId);
      
      if (!sipAccount) {
        throw new Error('利用可能なSIPアカウントが見つかりません');
      }
      
      // 発信準備
      const formattedNumber = this.formatPhoneNumber(params.phoneNumber);
      const callId = 'ami-' + Date.now() + '-' + Math.floor(Math.random() * 10000);
      
      logger.info(`🔥 [SIP-DEBUG] AMI発信準備完了:`);
      logger.info(`🔥 [SIP-DEBUG] - formattedNumber: ${formattedNumber}`);
      logger.info(`🔥 [SIP-DEBUG] - callId: ${callId}`);
      
      // SIPアカウントを使用中にマーク
      sipAccount.status = 'busy';
      sipAccount.lastUsed = new Date();
      
      // 通話IDとSIPアカウントを関連付け
      this.callToAccountMap.set(callId, sipAccount);
      
      // 🔥 【最重要】executeAmiOriginate 呼び出し
      logger.info(`🔥 [SIP-DEBUG] ===== executeAmiOriginate 呼び出し開始 =====`);
      const success = await this.executeAmiOriginate(sipAccount, formattedNumber, callId, campaignId, params);
      logger.info(`🔥 [SIP-DEBUG] ===== executeAmiOriginate 呼び出し完了: ${success} =====`);
      
      if (!success) {
        throw new Error('AMI発信コマンドの実行に失敗しました');
      }
      
      // 発信成功イベントをエミット
      this.emit('callStarted', {
        callId,
        number: params.phoneNumber,
        callerID: params.callerID || sipAccount.callerID,
        variables: params.variables || {},
        mainCallerId: sipAccount.mainCallerId
      });
      
      const result = {
        ActionID: callId,
        Response: 'Success',
        Message: `AMI call successfully initiated with IVR context`,
        SipAccount: sipAccount.username,
        mainCallerId: sipAccount.mainCallerId,
        provider: 'asterisk-ami',
        hasAudio: !!(params.campaignAudio && params.campaignAudio.length > 0),
        sipClient: 'asterisk-ami',
        usedAsteriskAmi: true,
        ivrContext: `autodialer-campaign-${campaignId}`
      };
      
      logger.info(`🔥 [SIP-DEBUG] sipService.originate 正常完了 (AMI版)`);
      
      return result;
      
    } catch (error) {
      logger.error(`🔥 [SIP-ERROR] AMI発信エラー:`, error);
      
      // エラー時はリソースを解放
      if (typeof callId !== 'undefined' && this.callToAccountMap.has(callId)) {
        await this.releaseCallResource(callId);
      }
      
      throw error;
    }
  }

  // 🆕 新メソッド：Asterisk AMI Originate実行
  async executeAmiOriginate(sipAccount, formattedNumber, callId, campaignId, params = {}) {
    logger.info('🔍 ===== AMI発信データ追跡開始 =====');
    
    // STEP1: 引数として受け取った時点のデータ検証
    logger.info(`🔍 STEP1-引数確認: sipAccount.username="${sipAccount.username}" (type: ${typeof sipAccount.username})`);
    logger.info(`🔍 STEP1-引数確認: formattedNumber="${formattedNumber}"`);
    logger.info(`🔍 STEP1-引数確認: callId="${callId}"`);
    logger.info(`🔍 STEP1-引数確認: campaignId="${campaignId}"`);
    
    // STEP2: データ汚染チェック
    if (sipAccount.username === formattedNumber) {
      logger.error('🚨 重大エラー検出: sipAccount.usernameに発信先番号が混入！');
      throw new Error('SIPアカウントデータ汚染検出 - 処理中断');
    }
    
    // STEP3: 安全なディープコピー作成
    const safeSipAccount = JSON.parse(JSON.stringify(sipAccount));
    logger.info(`🔍 STEP3-ディープコピー: safeSipAccount.username="${safeSipAccount.username}"`);
    
    // STEP4: Channel値構築
    const channelValue = `SIP/${safeSipAccount.username}@${safeSipAccount.domain}`;
    logger.info(`🔍 STEP4-Channel構築: "${channelValue}"`);
    
    // STEP5: 最終検証
    if (channelValue.includes(formattedNumber)) {
      logger.error('🚨 Channel値に発信先番号混入検出！');
      throw new Error('Channel値汚染検出 - AMI送信中断');
    }
    
    logger.info('✅ データ整合性確認完了 - AMI送信実行');
    
    try {
 // ✅ 修正後の正しい構造
      const originateCommand = [
        'Action: Originate',
	`Channel: PJSIP/${formattedNumber}@${sipAccount.username}`,
        `Context: autodialer-campaign-${campaignId}`,
        'Exten: s', // ✅ IVRの開始拡張子を's'に固定
        'Priority: 1',
        `CallerID: ${sipAccount.username}`, // ✅ SIPアカウントを発信者番号に
        `ActionID: ${callId}`,
        'Async: yes',
        '', // 空行で終了
        ''
      ].join('\r\n');
      
      logger.info('📤 AMI送信内容:');
      logger.info(originateCommand);
      
      // AMI送信実行
      const success = await this.sendAmiCommand(originateCommand);
      
      if (success) {
        logger.info('✅ AMI送信成功');
        return true;
      } else {
        logger.error('❌ AMI送信失敗');
        return false;
      }
      
    } catch (error) {
      logger.error('❌ executeAmiOriginate内エラー:', error);
      throw error;
    }
  }

  // formatPhoneNumber（既存機能保持）
  formatPhoneNumber(phoneNumber) {
    // 数字のみに変換
    const numbersOnly = phoneNumber.replace(/[^\d]/g, '');
    
    // 日本の電話番号フォーマット処理
    if (numbersOnly.startsWith('0')) {
      // 国内番号（0から始まる）はそのまま
      return numbersOnly;
    } else if (numbersOnly.startsWith('81')) {
      // 国際番号（81から始まる）もそのまま
      return numbersOnly;
    } else if (numbersOnly.length >= 10) {
      // その他の長い番号は0を前置
      return '0' + numbersOnly;
    }
    
    // デフォルトはそのまま返す
    return numbersOnly;
  }

  // モックモード発信（既存機能保持）
  async originateMock(params) {
    logger.info(`モックモードでSIP発信シミュレーション: 発信先=${params.phoneNumber}`);
    
    let sipAccount = await this.getAvailableSipAccount();
    if (!sipAccount) {
      // モックモードでも最低限のアカウントを作成
      this.createFallbackAccounts();
      sipAccount = this.sipAccounts[0];
    }
    
    const callId = `sip-mock-${Date.now()}`;
    sipAccount.status = 'busy';
    this.callToAccountMap.set(callId, sipAccount);
    
    this.emit('callStarted', {
      callId,
      number: params.phoneNumber,
      callerID: params.callerID || sipAccount.callerID || '0359468520',
      variables: params.variables || {},
      mainCallerId: sipAccount.mainCallerId
    });
    
    // 10秒後に自動終了（モック）
    setTimeout(() => {
      this.emit('callEnded', {
        callId,
        status: 'ANSWERED',
        duration: 10
      });
    }, 10000);
    
    return {
      ActionID: callId,
      Response: 'Success',
      Message: 'Originate successfully queued (SIP MOCK)',
      SipAccount: sipAccount.username,
      mainCallerId: sipAccount.mainCallerId,
      provider: 'sip'
    };
  }

  // 通話終了イベント処理（既存機能保持）
  async handleCallEnded(eventData) {
    const { callId, status, duration, keypress } = eventData;
    logger.info(`通話終了イベント処理: ${callId}, status=${status || 'unknown'}, keypress=${keypress || 'none'}`);
    
    try {
      if (keypress) {
        const dialerService = require('./dialerService');
        await dialerService.handleCallEnd(callId, duration, status, keypress);
      }
      
      if (status) {
        await this.updateCallStatus(callId, status, duration || 0);
      }
      
      await this.releaseCallResource(callId);
      
    } catch (error) {
      logger.error(`通話終了処理エラー: ${error.message}`);
    }
  }

  // SIPリソース解放（既存機能保持）
  async releaseCallResource(callId) {
    logger.debug(`SIPリソース解放: ${callId}`);
  
    if (!callId) {
      logger.warn('無効な通話ID: undefined または null');
      return false;
    }
    
    try {
      if (this.callToAccountMap.has(callId)) {
        const sipAccount = this.callToAccountMap.get(callId);
        
        // アカウント状態を更新
        if (sipAccount.status === 'busy') {
          sipAccount.status = 'available';
          sipAccount.lastUsed = new Date();
        }
        
        this.callToAccountMap.delete(callId);
        logger.debug(`SIPアカウント解放成功: ${callId}, account=${sipAccount.username}`);
      }
      
      return true;
      
    } catch (error) {
      logger.error(`SIPアカウント解放エラー: ${callId}`, error);
      return false;
    }
  }

  // 通話ステータス更新（既存機能保持）
  async updateCallStatus(callId, status, duration = 0) {
    try {
      logger.debug(`通話ステータス更新: callId=${callId}, status=${status}, duration=${duration}`);
      
      const [updateResult] = await db.query(`
        UPDATE call_logs
        SET status = ?, end_time = NOW(), duration = ?
        WHERE call_id = ?
      `, [status, duration, callId]);
      
      if (updateResult.affectedRows > 0) {
        logger.debug(`通話ログを更新しました: callId=${callId}`);
      } else {
        logger.warn(`通話ログが見つかりません: callId=${callId}`);
      }
      
      return true;
      
    } catch (error) {
      logger.error(`通話ステータス更新エラー: ${error.message}`);
      return false;
    }
  }

  // ヘルパーメソッド（既存機能保持）
  setMockMode(mode) {
    this.mockMode = mode === true;
    logger.info(`SIPサービスのモックモードを${this.mockMode ? '有効' : '無効'}に設定`);
    return this.mockMode;
  }
  
  async hasCall(callId) {
    if (!callId) return false;
    return this.callToAccountMap.has(callId) || this.activeCallsMap.has(callId);
  }
  
  getActiveCallCount() {
    return Math.max(this.activeCallsMap.size, this.callToAccountMap.size);
  }
  
  async handleCallEnd(callId, duration, status, keypress) {
    logger.info(`SIP通話終了処理: callId=${callId}, status=${status}, duration=${duration}`);
    
    this.emit('callEnded', {
      callId,
      status,
      duration,
      keypress
    });
    
    return await this.releaseCallResource(callId);
  }

  getAvailableSipAccountCount() {
    if (!this.sipAccounts) return 0;
    return this.sipAccounts.filter(account => account && account.status === 'available').length;
  }

  async simulateCallEnd(callId, status = 'ANSWERED', duration = 10) {
    logger.info(`通話終了シミュレーション: callId=${callId}, status=${status}, duration=${duration}秒`);
    
    this.emit('callEnded', {
      callId,
      status,
      duration
    });
    
    return true;
  }

  // アカウント状態取得（既存機能保持）
  getAccountStatus() {
    const allStatus = this.sipAccounts.map(account => ({
      username: account.username,
      status: account.status,
      callerID: account.callerID,
      lastUsed: account.lastUsed,
      failCount: account.failCount || 0,
      mainCallerId: account.mainCallerId,
      isVirtual: account.isVirtual || false,
      domain: account.domain,
      provider: account.provider
    }));
    
    const summary = {
      totalAccounts: this.sipAccounts.length,
      availableAccounts: this.sipAccounts.filter(a => a.status === 'available').length,
      busyAccounts: this.sipAccounts.filter(a => a.status === 'busy').length,
      errorAccounts: this.sipAccounts.filter(a => a.status === 'error').length,
      connected: this.connected,
      lastDatabaseCheck: this.lastDatabaseCheck
    };
    
    return {
      channels: allStatus,
      summary: summary
    };
  }

  // 安全な切断処理（既存機能保持）
  async disconnect() {
    logger.info('SIPサービスを切断しています...');
    
    // ヘルスチェック停止
    if (this.healthCheckIntervalId) {
      clearInterval(this.healthCheckIntervalId);
      this.healthCheckIntervalId = null;
    }
    
    // AMI接続切断
    if (this.amiConnection) {
      this.amiConnection.destroy();
      this.amiConnected = false;
    }
    
    // アクティブな通話を安全に終了
    const activeCallIds = Array.from(this.callToAccountMap.keys());
    for (const callId of activeCallIds) {
      try {
        await this.releaseCallResource(callId);
      } catch (error) {
        logger.error(`通話終了エラー: ${callId}`, error);
      }
    }
    
    this.connected = false;
    logger.info('✅ SIPサービス切断完了');
    
    return true;
  }
}

// シングルトンインスタンスを作成
const sipService = new SipService();

// プロセス終了時の安全な切断
process.on('SIGTERM', async () => {
  logger.info('SIGTERM受信 - SIPサービス安全切断');
  await sipService.disconnect();
});

process.on('SIGINT', async () => {
  logger.info('SIGINT受信 - SIPサービス安全切断');
  await sipService.disconnect();
});

module.exports = sipService;
