// backend/src/services/dialerService.js - 完全修正版
const db = require('./database');
const logger = require('./logger');

class DialerService {
  constructor() {
    this.activeCampaigns = new Map();
    this.activeCalls = new Map();
    this.initialized = false;
    this.dialerIntervalId = null;
    this.isProcessing = false;
    this.lastProcessTime = null;
    this.errorCount = 0;
    this.maxErrors = 3;
    this.dialInterval = 10000; // 10秒間隔
    this.processTimeout = 8000; // 8秒タイムアウト
    this.enabled = true; // 🔥 完全停止フラグ
  }

  // 🚀 初期化（安全版）
  async initialize() {
    if (this.initialized) {
      logger.info('DialerService は既に初期化されています');
      return true;
    }
    
    try {
      logger.info('🚀 DialerService 初期化開始');
      
      // 🔥 環境変数での無効化チェック
      if (process.env.DISABLE_AUTO_DIALER === 'true') {
        logger.info('🛑 AUTO_DIALER無効化フラグが設定されています');
        this.enabled = false;
        this.initialized = true;
        return true;
      }
      
      // アクティブキャンペーンを取得（安全版）
      const activeCampaigns = await this.queryWithTimeout(`
        SELECT c.id, c.name, c.max_concurrent_calls, c.caller_id_id, 
               ci.number as caller_id_number
        FROM campaigns c
        JOIN caller_ids ci ON c.caller_id_id = ci.id
        WHERE c.status = 'active' AND ci.active = true
        LIMIT 5
      `, [], 5000);
      
      logger.info(`📊 ${activeCampaigns.length}件のアクティブキャンペーンを検出`);
      
      // 🔥 発信対象の連絡先があるキャンペーンのみ処理
      let validCampaigns = 0;
      for (const campaign of activeCampaigns) {
        const [contactCount] = await this.queryWithTimeout(
          'SELECT COUNT(*) as count FROM contacts WHERE campaign_id = ? AND status = "pending" LIMIT 1',
          [campaign.id], 3000
        );
        
	if (contactCount && contactCount.length > 0 && contactCount[0] && contactCount[0].count > 0) {
          this.activeCampaigns.set(campaign.id, {
            id: campaign.id,
            name: campaign.name,
            maxConcurrentCalls: Math.min(campaign.max_concurrent_calls || 1, 2),
            callerIdId: campaign.caller_id_id,
            callerIdNumber: campaign.caller_id_number,
            activeCalls: 0,
            status: 'active',
            lastDialTime: null,
            failCount: 0
          });
          validCampaigns++;
        }
      }
      
      // 🔥 有効なキャンペーンがある場合のみ自動発信開始
      if (validCampaigns > 0 && this.enabled) {
        this.startDialerJobSafe();
        logger.info(`✅ ${validCampaigns}件のキャンペーンで自動発信開始`);
      } else {
        logger.info('ℹ️ 発信対象なし。自動発信は無効');
        this.enabled = false;
      }
      
      this.initialized = true;
      return true;
    } catch (error) {
      logger.error('❌ DialerService 初期化エラー:', error);
      this.enabled = false;
      this.initialized = false;
      return false;
    }
  }

  // 🔄 安全な自動発信ジョブ開始
  startDialerJobSafe() {
    if (!this.enabled) {
      logger.info('🛑 DialerService無効のため発信ジョブは開始されません');
      return false;
    }
    
    // 既存ジョブ停止
    if (this.dialerIntervalId) {
      clearInterval(this.dialerIntervalId);
      this.dialerIntervalId = null;
    }
    
    // 🔥 安全な間隔で開始
    this.dialerIntervalId = setInterval(async () => {
      // 無効化チェック
      if (!this.enabled) {
        logger.info('🛑 無効化フラグ検出 - 発信ジョブ停止');
        this.stopDialerJob();
        return;
      }
      
      // アクティブキャンペーン数チェック
      if (this.activeCampaigns.size === 0) {
        logger.info('⏹️ アクティブキャンペーンなし - 発信ジョブ停止');
        this.stopDialerJob();
        return;
      }
      
      // 処理中チェック
      if (this.isProcessing) {
        logger.debug('⏭️ 処理中のためスキップ');
        return;
      }
      
      // エラー上限チェック
      if (this.errorCount >= this.maxErrors) {
        logger.warn(`🛑 エラー上限(${this.maxErrors})に達したため停止`);
        this.stopDialerJob();
        return;
      }
      
      // 安全な処理実行
      try {
        await this.processDialerQueueSafe();
      } catch (error) {
        this.errorCount++;
        logger.error(`❌ 発信ジョブエラー (${this.errorCount}/${this.maxErrors}):`, error.message);
      }
    }, this.dialInterval);
    
    logger.info(`🔥 安全な自動発信ジョブ開始: 間隔=${this.dialInterval}ms`);
    return true;
  }

  // 🛑 発信ジョブ停止
  stopDialerJob() {
    if (this.dialerIntervalId) {
      clearInterval(this.dialerIntervalId);
      this.dialerIntervalId = null;
      this.isProcessing = false;
      logger.info('🛑 自動発信ジョブを停止しました');
      return true;
    }
    return false;
  }

  // 🔄 安全な発信キュー処理
  async processDialerQueueSafe() {
    this.isProcessing = true;
    this.lastProcessTime = new Date();
    
    try {
      await Promise.race([
        this.processDialerQueueLight(),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('発信処理タイムアウト')), this.processTimeout)
        )
      ]);
      
      this.errorCount = 0; // 成功時リセット
    } catch (error) {
      throw error;
    } finally {
      this.isProcessing = false;
    }
  }

  // 🔄 軽量発信キュー処理
  async processDialerQueueLight() {
    try {
      let totalAttempts = 0;
      const maxAttempts = 2; // 🔥 1回あたり最大2件
      
      for (const [campaignId, campaign] of this.activeCampaigns.entries()) {
        if (totalAttempts >= maxAttempts || !this.enabled) break;
        if (campaign.status !== 'active') continue;
        
        // 同時発信数チェック
        if (campaign.activeCalls >= campaign.maxConcurrentCalls) continue;
        
        // 🔥 発信対象を1件だけ取得
        const contacts = await this.queryWithTimeout(`
          SELECT id, phone, name, company 
          FROM contacts 
          WHERE campaign_id = ? AND status = 'pending' 
          LIMIT 1
        `, [campaignId], 3000);
        
        if (contacts.length === 0) {
          // 発信対象なしの場合はキャンペーン完了チェック
          await this.checkCampaignCompletion(campaignId);
          continue;
        }
        
        // 1件のみ発信試行
        const contact = contacts[0];
        const result = await this.dialContactLight(campaign, contact);
        if (result) {
          campaign.activeCalls++;
          totalAttempts++;
        }
        
        // 発信間隔
        if (totalAttempts < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      logger.debug(`📞 発信サイクル完了: ${totalAttempts}件実行`);
    } catch (error) {
      logger.error('軽量発信キュー処理エラー:', error);
      throw error;
    }
  }

  // 📞 軽量発信処理
  async dialContactLight(campaign, contact) {
    try {
      logger.info(`📞 発信: ${contact.phone}`);
      
      // ステータス更新
      await this.queryWithTimeout(
        'UPDATE contacts SET status = ? WHERE id = ?',
        ['called', contact.id], 2000
      );
      
      // 簡単な発信パラメータ
      const params = {
        phoneNumber: contact.phone,
        context: 'autodialer',
        callerID: `"${campaign.name}" <${campaign.callerIdNumber}>`,
        variables: {
          CAMPAIGN_ID: campaign.id,
          CONTACT_ID: contact.id,
          AUTO_DIAL: 'true'
        }
      };
      
      // 発信実行
      const callService = require('./callService');
      const result = await callService.originate(params);
      
      // 通話ログ記録
      await this.queryWithTimeout(`
        INSERT INTO call_logs 
        (contact_id, campaign_id, caller_id_id, call_id, start_time, status, call_provider)
        VALUES (?, ?, ?, ?, NOW(), 'ORIGINATING', ?)
      `, [contact.id, campaign.id, campaign.callerIdId, result.ActionID, result.provider || 'sip'], 3000);
      
      // アクティブコール記録
      this.activeCalls.set(result.ActionID, {
        id: result.ActionID,
        contactId: contact.id,
        campaignId: campaign.id,
        startTime: new Date(),
        status: 'active'
      });
      
      logger.info(`✅ 発信成功: ${contact.phone}`);
      return true;
    } catch (error) {
      logger.error(`❌ 発信エラー: ${contact.phone}`, error);
      
      // エラー時は失敗ステータスに更新
      await this.queryWithTimeout(
        'UPDATE contacts SET status = ? WHERE id = ?',
        ['failed', contact.id], 2000
      ).catch(() => {});
      
      return false;
    }
  }

  // ✅ タイムアウト付きクエリ
  async queryWithTimeout(sql, params = [], timeoutMs = 5000) {
    return new Promise(async (resolve, reject) => {
      const timer = setTimeout(() => {
        reject(new Error(`クエリタイムアウト: ${timeoutMs}ms`));
      }, timeoutMs);
      
      try {
        const [result] = await db.query(sql, params);
        clearTimeout(timer);
        resolve(result);
      } catch (error) {
        clearTimeout(timer);
        reject(error);
      }
    });
  }

  // 🏁 キャンペーン完了チェック
  async checkCampaignCompletion(campaignId) {
    try {
      const [pendingCount] = await this.queryWithTimeout(
        'SELECT COUNT(*) as count FROM contacts WHERE campaign_id = ? AND status = "pending"',
        [campaignId], 3000
      );
      
      if (pendingCount[0].count === 0) {
        await this.completeCampaign(campaignId);
      }
    } catch (error) {
      logger.error(`キャンペーン完了チェックエラー: ${campaignId}`, error);
    }
  }

  // 🚀 キャンペーン開始
  async startCampaign(campaignId) {
    try {
      logger.info(`🚀 キャンペーン開始: ID=${campaignId}`);
      
      const campaigns = await this.queryWithTimeout(`
        SELECT c.id, c.name, c.max_concurrent_calls, c.caller_id_id, 
               ci.number as caller_id_number
        FROM campaigns c
        JOIN caller_ids ci ON c.caller_id_id = ci.id
        WHERE c.id = ? AND ci.active = true
      `, [campaignId], 5000);
      
      if (campaigns.length === 0) {
        throw new Error('キャンペーンが見つかりません');
      }
      
      const campaign = campaigns[0];
      
      await this.queryWithTimeout(
        'UPDATE campaigns SET status = ? WHERE id = ?',
        ['active', campaignId], 3000
      );
      
      this.activeCampaigns.set(campaignId, {
        id: campaign.id,
        name: campaign.name,
        maxConcurrentCalls: Math.min(campaign.max_concurrent_calls || 1, 2),
        callerIdId: campaign.caller_id_id,
        callerIdNumber: campaign.caller_id_number,
        activeCalls: 0,
        status: 'active',
        lastDialTime: new Date(),
        failCount: 0
      });
      
      // 発信ジョブが停止している場合は開始
      if (!this.dialerIntervalId && this.enabled) {
        this.startDialerJobSafe();
      }
      
      logger.info(`✅ キャンペーン開始成功: ${campaign.name}`);
      return true;
    } catch (error) {
      logger.error(`❌ キャンペーン開始エラー: ${error.message}`);
      return false;
    }
  }

  // 🛑 キャンペーン停止
  async pauseCampaign(campaignId) {
    try {
      await this.queryWithTimeout(
        'UPDATE campaigns SET status = ? WHERE id = ?',
        ['paused', campaignId], 3000
      );
      
      this.activeCampaigns.delete(campaignId);
      
      if (this.activeCampaigns.size === 0) {
        this.stopDialerJob();
      }
      
      logger.info(`🛑 キャンペーン停止: ID=${campaignId}`);
      return true;
    } catch (error) {
      logger.error(`キャンペーン停止エラー: ${campaignId}`, error);
      return false;
    }
  }

  // 🏁 キャンペーン完了
  async completeCampaign(campaignId) {
    try {
      await this.queryWithTimeout(
        'UPDATE campaigns SET status = ? WHERE id = ?',
        ['completed', campaignId], 3000
      );
      
      this.activeCampaigns.delete(campaignId);
      
      if (this.activeCampaigns.size === 0) {
        this.stopDialerJob();
      }
      
      logger.info(`🏁 キャンペーン完了: ${campaignId}`);
      return true;
    } catch (error) {
      logger.error(`キャンペーン完了エラー: ${campaignId}`, error);
      return false;
    }
  }

  // 📞 通話終了処理
  async handleCallEnd(callId, duration, disposition, keypress) {
    try {
      if (!this.activeCalls.has(callId)) {
        logger.debug(`未知の通話ID: ${callId}`);
        return false;
      }
      
      const call = this.activeCalls.get(callId);
      
      await this.queryWithTimeout(`
        UPDATE call_logs
        SET end_time = NOW(), duration = ?, status = ?, keypress = ?
        WHERE call_id = ?
      `, [duration, disposition, keypress, callId], 3000);
      
      let contactStatus = 'completed';
      if (keypress === '9') {
        contactStatus = 'dnc';
        // DNC登録処理
        const contacts = await this.queryWithTimeout(
          'SELECT phone FROM contacts WHERE id = ?',
          [call.contactId], 2000
        );
        if (contacts.length > 0) {
          await this.queryWithTimeout(
            'INSERT IGNORE INTO dnc_list (phone, reason) VALUES (?, ?)',
            [contacts[0].phone, 'ユーザーリクエスト'], 2000
          );
        }
      }
      
      await this.queryWithTimeout(
        'UPDATE contacts SET status = ? WHERE id = ?',
        [contactStatus, call.contactId], 2000
      );
      
      // アクティブコール数を減らす
      if (this.activeCampaigns.has(call.campaignId)) {
        const campaign = this.activeCampaigns.get(call.campaignId);
        campaign.activeCalls = Math.max(0, campaign.activeCalls - 1);
      }
      
      this.activeCalls.delete(callId);
      
      logger.info(`✅ 通話終了処理完了: ${callId}`);
      return true;
    } catch (error) {
      logger.error(`❌ 通話終了処理エラー: ${callId}`, error);
      return false;
    }
  }

  // 📊 ステータス取得
  getHealthStatus() {
    return {
      timestamp: new Date().toISOString(),
      initialized: this.initialized,
      enabled: this.enabled,
      dialerJobRunning: this.dialerIntervalId !== null,
      isProcessing: this.isProcessing,
      lastProcessTime: this.lastProcessTime,
      errorCount: this.errorCount,
      maxErrors: this.maxErrors,
      activeCampaigns: {
        count: this.activeCampaigns.size,
        details: Array.from(this.activeCampaigns.entries()).map(([id, campaign]) => ({
          id: id,
          name: campaign.name,
          status: campaign.status,
          activeCalls: campaign.activeCalls,
          maxConcurrentCalls: campaign.maxConcurrentCalls
        }))
      },
      activeCalls: {
        count: this.activeCalls.size
      }
    };
  }

  // 🚨 緊急停止
  async emergencyStopAll(reason = '緊急停止') {
    logger.warn(`🚨 緊急停止実行: ${reason}`);
    
    this.enabled = false;
    this.stopDialerJob();
    
    const stoppedCampaigns = [];
    for (const [campaignId, campaign] of this.activeCampaigns.entries()) {
      try {
        await this.pauseCampaign(campaignId);
        stoppedCampaigns.push({ id: campaignId, name: campaign.name });
      } catch (error) {
        logger.error(`緊急停止エラー: ${campaignId}`, error);
      }
    }
    
    this.errorCount = 0;
    this.isProcessing = false;
    
    logger.warn(`🚨 緊急停止完了: ${stoppedCampaigns.length}キャンペーン停止`);
    
    return {
      timestamp: new Date().toISOString(),
      reason: reason,
      stoppedCampaigns: stoppedCampaigns,
      success: true
    };
  }
}

const dialerService = new DialerService();
module.exports = dialerService;
